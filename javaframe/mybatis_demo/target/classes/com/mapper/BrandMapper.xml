<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--        namespace:名称空间-->
<mapper namespace="com.mapper.BrandMapper">
    <!--    开启二级缓存-->
    <cache readOnly="true"/>
    <!--    &lt;!&ndash;    sql片段&ndash;&gt;-->
    <!--    <sql id="brand_select">-->
    <!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
    <!--    </sql>-->
    <!--    <select id="selectAll" resultType="Brand">-->
    <!--        select-->
    <!--        # 通过id引入sql片段-->
    <!--        <include refid="brand_select"></include>-->
    <!--        from tb_brand;-->
    <!--    </select>-->
    <!--    id:唯一标识
            type：映射的类型，支持别名-->
    <resultMap id="brandResultMap" type="Brand">
        <!--        id:完成主键字段的映射
                    result:完成一般字段的映射
                        column:表的列名
                        property:实体类的属性-->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>
    <!--    使用主键返回
                1. 设置useGeneratedKeys的属性值为true；
                2. 设置keyProperty的属性值为主键对应的实体属性名称-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>
    <delete id="deleteByIds">
        delete
        from tb_brand
        where id in
        # mybatis会将数组参数，封装为一个Map集合
        # 默认为：array = 数组
        # 可以使用@Param注解改变Map集合的默认key的名称
        # collection：需要遍历的数组名称
        # item：需要遍历的键
        # separator：分隔符
        # open：开始
        # close：结束
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    and company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    and brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>
</mapper>